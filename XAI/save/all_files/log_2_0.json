{
    "premises-nl": [
        "Students who have completed the core curriculum and passed the science assessment are qualified for advanced courses.",
        "Students who are qualified for advanced courses and have completed research methodology are eligible for the international program.",
        "Students who have passed the language proficiency exam are eligible for the international program.",
        "Students who are eligible for the international program and have completed a capstone project are awarded an honors diploma.",
        "Students who have been awarded an honors diploma and have completed community service qualify for the university scholarship.",
        "Students who have been awarded an honors diploma and have received a faculty recommendation qualify for the university scholarship.",
        "Sophia has completed the core curriculum.",
        "Sophia has passed the science assessment.",
        "Sophia has completed the research methodology course.",
        "Sophia has completed her capstone project.",
        "Sophia has completed the required community service hours."
    ],
    "fol_premises": [
        "ForAll(x, (completed_core_curriculum(x) ∧ passed_science_assessment(x)) → qualified_for_advanced_courses(x))",
        "ForAll(x, (qualified_for_advanced_courses(x) ∧ completed_research_methodology(x)) → eligible_for_international_program(x))",
        "ForAll(x, passed_language_proficiency(x) → eligible_for_international_program(x))",
        "ForAll(x, (eligible_for_international_program(x) ∧ completed_capstone_project(x)) → awarded_honors_diploma(x))",
        "ForAll(x, (awarded_honors_diploma(x) ∧ completed_community_service(x)) → qualifies_for_scholarship(x))",
        "ForAll(x, (awarded_honors_diploma(x) ∧ received_faculty_recommendation(x)) → qualifies_for_scholarship(x))",
        "completed_core_curriculum(Sophia)",
        "passed_science_assessment(Sophia)",
        "completed_research_methodology(Sophia)",
        "completed_capstone_project(Sophia)",
        "completed_community_service(Sophia)"
    ],
    "questions": [
        "\n Sophia qualifies for the university scholarship. \n Sophia needs a faculty recommendation to qualify for the scholarship. \n Sophia is eligible for the international program. \n Sophia needs to pass the language proficiency exam to get an honors diploma.",
        "Sophia qualifies for the university scholarship."
    ],
    "reasonings": [
        "Premises 7 and 8 confirm Sophia completed the core curriculum and passed the science assessment, satisfying premise 1 for advanced courses. Premise 9’s research methodology and premise 2 make her eligible for the international program. Premise 10’s capstone project and premise 4 award her an honors diploma. Premise 11’s community service and premise 5 qualify her for the university scholarship, making A the strongest conclusion. Option B is false because community service suffices without a recommendation. Option C is true but weaker, as scholarship implies international program eligibility. Option D is false because language proficiency is not required via premise 2’s path.",
        "The university scholarship per premise 5 requires an honors diploma and community service. Premise 4 requires international program eligibility and a capstone project, premise 2 requires advanced course qualification and research methodology, and premise 1 requires core curriculum and science assessment. Premises 7–11 confirm Sophia’s curriculum, assessment, methodology, capstone, and service, satisfying all conditions for the scholarship."
    ],
    "answers": [
        "A",
        "Yes"
    ],
    "LLM-FOL": [
        "∀x (Student(x) ∧ CompletedCoreCurriculum(x) ∧ PassedScienceAssessment(x) → QualifiedForAdvancedCourses(x))",
        "∀x (Student(x) ∧ QualifiedForAdvancedCourses(x) ∧ CompletedResearchMethodology(x) → EligibleForInternationalProgram(x))",
        "∀x (Student(x) ∧ PassedLanguageProficiencyExam(x) → EligibleForInternationalProgram(x))",
        "∀x (Student(x) ∧ EligibleForInternationalProgram(x) ∧ CompletedCapstoneProject(x) → AwardedHonorsDiploma(x))",
        "∀x (Student(x) ∧ AwardedHonorsDiploma(x) ∧ CompletedCommunityService(x) → QualifiesForUniversityScholarship(x))",
        "∀x (Student(x) ∧ AwardedHonorsDiploma(x) ∧ ReceivedFacultyRecommendation(x) → QualifiesForUniversityScholarship(x))",
        "∀x (Student(x) ∧ AtSophiaUniversity(x) → CompletedCoreCurriculum(x))",
        "PassedScienceAssessment(Sophia)",
        "HasCompleted(Sophia, ResearchMethodologyCourse)",
        "HasCompletedCapstoneProject(Sophia)",
        "∀x (Person(x) ∧ NameSophia(x) → CompletedCommunityServiceHours(x))"
    ],
    "question-FOL": [
        "∀x (Person(x) → ∃y (Organization(y) ∧ Hires(x, y)))\n QualifiesForScholarship(Sophia) ↔ (StudentAtUniversity(Sophia) ∧ UniversityScholarship(Sophia))\n ∀x (NeedsFacultyRecommendation(Sophia) → QualifyForScholarship(Sophia))\n ∀x (Person(Sophia) ∧ EligibleForInternationalProgram(Sophia) → InternationalProgram(Sophia))\n ∀x (NeedsLanguageProficiencyExam(Sophia) → HonorsDiploma(Sophia)):",
        "QualifiesForScholarship(Sophia) ↔ (StudentAtUniversity(Sophia) ∧ HighAcademicAchievement(Sophia))"
    ],
    "logic_program": [
        "CompletedCoreCurriculum(x) ::: x has completed the core curriculum of their degree program.",
        "CompletedResearchMethodology(x) ::: x has completed a research methodology course.",
        "Person(x) ::: x is a person.",
        "NameSophia(x) ::: x has the name Sophia.",
        "ReceivedFacultyRecommendation(x) ::: x has received a faculty recommendation.",
        "CompletedCapstoneProject(x) ::: x has completed a capstone project.",
        "HasCompleted(Sophia, ResearchMethodologyCourse) ::: Sophia has completed a research methodology course.",
        "PassedScienceAssessment(Sophia) ::: Sophia has passed a science assessment.",
        "QualifiesForUniversityScholarship(x) ::: x qualifies for a university scholarship.",
        "PassedLanguageProficiencyExam(x) ::: x has passed a language proficiency exam.",
        "QualifiedForAdvancedCourses(x) ::: x is qualified for advanced courses.",
        "CompletedCommunityService(x) ::: x has completed community service.",
        "AwardedHonorsDiploma(x) ::: x has been awarded an honors diploma.",
        "AtSophiaUniversity(x) ::: x is at Sophia University.",
        "EligibleForInternationalProgram(x) ::: x is eligible for an international program.",
        "Student(x) ::: x is a student.",
        "HasCompletedCapstoneProject(Sophia) ::: Sophia has completed a capstone project.",
        "CompletedCommunityServiceHours(x) ::: x has completed community service hours.",
        "PassedScienceAssessment(x) ::: x has passed a science assessment.",
        "QualifyForScholarship(Sophia) ::: Sophia qualifies for a scholarship.",
        "StudentAtUniversity(Sophia) ::: Sophia is a student at a university.",
        "QualifiesForScholarship(Sophia) ::: Sophia qualifies for a scholarship.",
        "UniversityScholarship(Sophia) ::: Sophia receives a scholarship from the university.",
        "InternationalProgram(Sophia) ::: Sophia is enrolled in an international program.",
        "EligibleForInternationalProgram(Sophia) ::: Sophia is eligible for an international program.",
        "Person(Sophia) ::: Sophia is a person.",
        "HonorsDiploma(Sophia) ::: Sophia receives an honors diploma.",
        "NeedsLanguageProficiencyExam(Sophia) ::: Sophia needs to take a language proficiency exam.",
        "NeedsFacultyRecommendation(Sophia) ::: Sophia needs a faculty recommendation."
    ],
    "new-fol": [
        "∀x (Student(x) ∧ CompletedCoreCurriculum(x) ∧ PassedScienceAssessment(x) → QualifiedForHighAchievingCourses(x))",
        "∀x (Student(x) ∧ QualifiedForHighAchievingCourses(x) ∧ CompletedResearchMethodology(x) → EligibleForInternationalProgram(x))",
        "∀x (Student(x) ∧ NeedsLanguageProficiencyExam(x) → EligibleForInternationalProgram(x))",
        "∀x (Student(x) ∧ EligibleForInternationalProgram(x) ∧ CompletedCapstoneProject(x) → AwardedHonorsDiploma(x))",
        "∀x (Student(x) ∧ AwardedHonorsDiploma(x) ∧ CompletedCommunityServiceHours(x) → QualifiesForUniversityScholarship(x))",
        "∀x (Student(x) ∧ AwardedHonorsDiploma(x) ∧ ReceivedFacultyRecommendation(x) → QualifiesForUniversityScholarship(x))",
        "∀x (Student(x) ∧ AtSophiaUniversity(x) → CompletedCoreCurriculum(x))",
        "PassedScienceAssessment(x)",
        "CompletedResearchMethodologyCourse(Sophia)",
        "HasCompletedCapstoneProject(Sophia)",
        "∀x (Person(x) ∧ NameSophia(x) → CompletedCommunityServiceHours(x))"
    ],
    "maps": [
        {},
        {
            "CompletedCapstoneProject(x)": "HasCompletedCapstoneProject(x)",
            "HasCompletedCapstoneProject(Sophia)": "CompletedCapstoneProject(Sophia)"
        },
        {
            "HasCompleted(Sophia, ResearchMethodologyCourse)": "CompletedResearchMethodologyCourse(Sophia)",
            "NeedsFacultyRecommendation(Sophia)": "NeedsRecommendationFromFaculty(Sophia)"
        },
        {
            "PassedScienceAssessment(Sophia)": "PassedScienceAssessment(x)",
            "QualifyForScholarship(Sophia)": "QualifyForScholarship(x)",
            "StudentAtUniversity(Sophia)": "StudentAtUniversity(x)",
            "UniversityScholarship(Sophia)": "UniversityScholarship(x)",
            "EligibleForInternationalProgram(Sophia)": "EligibleForInternationalProgram(x)"
        },
        {
            "PassedLanguageProficiencyExam(x)": "NeedsLanguageProficiencyExam(x)",
            "NeedsLanguageProficiencyExam(Sophia)": "HasPassedLanguageProficiencyExam(Sophia)"
        },
        {
            "QualifiedForAdvancedCourses(x)": "QualifiedForHighAchievingCourses(x)",
            "EligibleForInternationalProgram(x)": "EligibleForGlobalExchangeProgram(x)"
        },
        {
            "CompletedCommunityService(x)": "CompletedCommunityServiceHours(x)",
            "CompletedCommunityServiceHours(x)": "HasCompletedCommunityService(x)"
        }
    ],
    "q_ids": null,
    "logic_program_premise": [
        "CompletedCoreCurriculum(x) ::: x has completed the core curriculum of their degree program.",
        "CompletedResearchMethodology(x) ::: x has completed a research methodology course.",
        "Person(x) ::: x is a person.",
        "NameSophia(x) ::: x has the name Sophia.",
        "ReceivedFacultyRecommendation(x) ::: x has received a faculty recommendation.",
        "CompletedCapstoneProject(x) ::: x has completed a capstone project.",
        "HasCompleted(Sophia, ResearchMethodologyCourse) ::: Sophia has completed a research methodology course.",
        "PassedScienceAssessment(Sophia) ::: Sophia has passed a science assessment.",
        "QualifiesForUniversityScholarship(x) ::: x qualifies for a university scholarship.",
        "PassedLanguageProficiencyExam(x) ::: x has passed a language proficiency exam.",
        "QualifiedForAdvancedCourses(x) ::: x is qualified for advanced courses.",
        "CompletedCommunityService(x) ::: x has completed community service.",
        "AwardedHonorsDiploma(x) ::: x has been awarded an honors diploma.",
        "AtSophiaUniversity(x) ::: x is at Sophia University.",
        "EligibleForInternationalProgram(x) ::: x is eligible for an international program.",
        "Student(x) ::: x is a student.",
        "HasCompletedCapstoneProject(Sophia) ::: Sophia has completed a capstone project.",
        "CompletedCommunityServiceHours(x) ::: x has completed community service hours.",
        "PassedScienceAssessment(x) ::: x has passed a science assessment."
    ],
    "logic_program_question": [
        "QualifyForScholarship(Sophia) ::: Sophia qualifies for a scholarship.",
        "StudentAtUniversity(Sophia) ::: Sophia is a student at a university.",
        "QualifiesForScholarship(Sophia) ::: Sophia qualifies for a scholarship.",
        "UniversityScholarship(Sophia) ::: Sophia receives a scholarship from the university.",
        "InternationalProgram(Sophia) ::: Sophia is enrolled in an international program.",
        "EligibleForInternationalProgram(Sophia) ::: Sophia is eligible for an international program.",
        "Person(Sophia) ::: Sophia is a person.",
        "HonorsDiploma(Sophia) ::: Sophia receives an honors diploma.",
        "NeedsLanguageProficiencyExam(Sophia) ::: Sophia needs to take a language proficiency exam.",
        "NeedsFacultyRecommendation(Sophia) ::: Sophia needs a faculty recommendation."
    ],
    "new-question-FOL": [
        "∀x (Person(x) → ∃y (Organization(y) ∧ Hires(x, y)))\n QualifiesForScholarship(Sophia) ↔ (StudentAtUniversity(x) ∧ UniversityScholarship(x))\n ∀x (NeedsRecommendationFromFaculty(Sophia) → QualifyForScholarship(x))\n ∀x (Person(Sophia) ∧ EligibleForInternationalProgram(x) → InternationalProgram(Sophia))\n ∀x (NeedsLanguageProficiencyExam(Sophia) → HonorsDiploma(Sophia)):",
        "QualifiesForScholarship(Sophia) ↔ (StudentAtUniversity(x) ∧ HighAcademicAchievement(Sophia))"
    ],
    "clusters": [
        [
            "CompletedCoreCurriculum(x) ::: x has completed the core curriculum of their degree program."
        ],
        [
            "CompletedResearchMethodology(x) ::: x has completed a research methodology course."
        ],
        [
            "Person(x) ::: x is a person.",
            "Student(x) ::: x is a student.",
            "Person(Sophia) ::: Sophia is a person."
        ],
        [
            "NameSophia(x) ::: x has the name Sophia."
        ],
        [
            "ReceivedFacultyRecommendation(x) ::: x has received a faculty recommendation."
        ],
        [
            "CompletedCapstoneProject(x) ::: x has completed a capstone project.",
            "HasCompletedCapstoneProject(Sophia) ::: Sophia has completed a capstone project."
        ],
        [
            "HasCompleted(Sophia, ResearchMethodologyCourse) ::: Sophia has completed a research methodology course.",
            "NeedsFacultyRecommendation(Sophia) ::: Sophia needs a faculty recommendation."
        ],
        [
            "PassedScienceAssessment(Sophia) ::: Sophia has passed a science assessment.",
            "PassedScienceAssessment(x) ::: x has passed a science assessment.",
            "QualifyForScholarship(Sophia) ::: Sophia qualifies for a scholarship.",
            "StudentAtUniversity(Sophia) ::: Sophia is a student at a university.",
            "QualifiesForScholarship(Sophia) ::: Sophia qualifies for a scholarship.",
            "UniversityScholarship(Sophia) ::: Sophia receives a scholarship from the university.",
            "EligibleForInternationalProgram(Sophia) ::: Sophia is eligible for an international program."
        ],
        [
            "QualifiesForUniversityScholarship(x) ::: x qualifies for a university scholarship."
        ],
        [
            "PassedLanguageProficiencyExam(x) ::: x has passed a language proficiency exam.",
            "NeedsLanguageProficiencyExam(Sophia) ::: Sophia needs to take a language proficiency exam."
        ],
        [
            "QualifiedForAdvancedCourses(x) ::: x is qualified for advanced courses.",
            "EligibleForInternationalProgram(x) ::: x is eligible for an international program."
        ],
        [
            "CompletedCommunityService(x) ::: x has completed community service.",
            "CompletedCommunityServiceHours(x) ::: x has completed community service hours."
        ],
        [
            "AwardedHonorsDiploma(x) ::: x has been awarded an honors diploma."
        ],
        [
            "AtSophiaUniversity(x) ::: x is at Sophia University."
        ],
        [
            "InternationalProgram(Sophia) ::: Sophia is enrolled in an international program."
        ],
        [
            "HonorsDiploma(Sophia) ::: Sophia receives an honors diploma."
        ]
    ],
    "solver": [
        {
            "final_ans": "A",
            "idx_final_ans": [],
            "dic_idx_wrong_options": {},
            "proof_final_ans": [],
            "dic_proof_wrong_options": {}
        },
        {
            "final_ans": "Uncertain",
            "idx_final_ans": [],
            "dic_idx_wrong_options": {},
            "proof_final_ans": "============================== prooftrans ============================\nProver9 (64) version 2009-11A, November 2009.\nProcess 2318826 was started by npl on uit-dgx01,\nFri May  9 02:53:21 2025\nThe command was \"/data/npl/ICEK/News/Qwen_evaluate/LADR-2009-11A/bin/prover9\".\n============================== end of head ===========================\n\n============================== end of input ==========================",
            "dic_proof_wrong_options": {}
        }
    ]
}
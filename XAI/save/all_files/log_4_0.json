{
    "premises-nl": [
        "If a student completes all required courses, they are eligible for graduation.",
        "If a student is eligible for graduation and maintains a GPA above 3.5, they graduate with honors.",
        "If a student graduates with honors and completes a thesis, they receive academic distinction.",
        "If a student receives academic distinction, they qualify for the graduate fellowship program.",
        "John has completed all required courses.",
        "John maintains a GPA of 3.8.",
        "John has completed a thesis."
    ],
    "fol_premises": [
        "ForAll(x, completed_required_courses(x) → eligible_for_graduation(x))",
        "ForAll(x, (eligible_for_graduation(x) ∧ gpa_above_3_5(x)) → graduates_with_honors(x))",
        "ForAll(x, (graduates_with_honors(x) ∧ completed_thesis(x)) → academic_distinction(x))",
        "ForAll(x, academic_distinction(x) → qualifies_for_fellowship(x))",
        "completed_required_courses(John)",
        "gpa_above_3_5(John)",
        "completed_thesis(John)"
    ],
    "questions": [
        "\n John qualifies for the graduate fellowship program. \n John needs faculty recommendation for the fellowship. \n John must complete an internship to qualify. \n John's GPA is insufficient for honors.",
        "John receives academic distinction."
    ],
    "reasonings": [
        "Premise 5 and premise 1 confirm John is eligible for graduation by completing required courses. Premise 6’s GPA of 3.8 and premise 2 qualify him for honors. Premise 7’s thesis and premise 3 grant academic distinction. Premise 4 confirms distinction qualifies him for the graduate fellowship program, supporting option A. Option B is false because no recommendation is required. Option C is false because no internship is mentioned. Option D is false because his GPA exceeds 3.5.",
        "Academic distinction per premise 3 requires graduating with honors and completing a thesis. Premise 2 requires graduation eligibility and a GPA above 3.5, and premise 1 requires course completion. Premises 5–7 confirm John’s course completion, GPA of 3.8, and thesis, satisfying all conditions for academic distinction."
    ],
    "answers": [
        "A",
        "Yes"
    ],
    "LLM-FOL": [
        "∀x (Student(x) ∧ CompletesRequiredCourses(x) → EligibleForGraduation(x))",
        "∀x (Student(x) ∧ EligibleForGraduation(x) ∧ MaintainsGPAAbove35(x) → GraduatesWithHonors(x))",
        "∀x (Student(x) ∧ GraduatesWithHonors(x) ∧ CompletesThesis(x) → ReceivesAcademicDistinction(x))",
        "∀x (Student(x) ∧ ReceivesAcademicDistinction(x) → QualifiesForGraduateFellowshipProgram(x))",
        "∀x (Student(x) ∧ CompletedCourses(x, y) ∧ RequiredCourses(y) → CompletedAllRequiredCourses(x))",
        "MaintainsGPA(John, 3.8)",
        "HasCompletedThesis(John)"
    ],
    "question-FOL": [
        "∀x (Person(x) → ∃y (Organization(y) ∧ Hires(x, y)))\n QualifiesForGraduateFellowship(John) ∧ GraduateFellowshipProgram(program)\n ∀x ∀y (John(x) ∧ Fellowship(y) → NeedsRecommendation(x, y))\n MustCompleteInternship(John)\n ∀x (GradePointAverage(x) ∧ BelongsToJohn(x) → ¬HonorsEligible(x)):",
        "∀z (AcademicDistinction(z) → Receives(x, z))"
    ],
    "logic_program": [
        "RequiredCourses(y) ::: HasEnrolledInSpecifiedCourses(y)",
        "EligibleForGraduation(x) ::: MeetsGraduationRequirements(x)",
        "HasCompletedThesis(John) ::: CompletedThesis(John)",
        "CompletedAllRequiredCourses(x) ::: EnrolledInAndCompletedAllCourses(x)",
        "QualifiesForGraduateFellowshipProgram(x) ::: MeetsFellowshipProgramRequirements(x)",
        "MaintainsGPA(John, 3.8) ::: MaintainsHighGPA(John, 3.8)",
        "Student(x) ::: EnrolledInCourses(x)",
        "CompletesThesis(x) ::: CompletesThesisProject(x)",
        "ReceivesAcademicDistinction(x) ::: ReceivesDistinction(x)",
        "CompletesRequiredCourses(x) ::: EnrolledInAndCompletedRequiredCourses(x)",
        "CompletedCourses(x, y) ::: EnrolledInAndCompletedCourses(x, y)",
        "GraduatesWithHonors(x) ::: GraduatesWithDistinction(x)",
        "MaintainsGPAAbove35(x) ::: MaintainsHighGPAAbove35(x)",
        "Fellowship(y) ::: Y is a fellowship",
        "GraduateFellowshipProgram(program) ::: Program is a graduate fellowship program",
        "BelongsToJohn(x) ::: X belongs to John",
        "QualifiesForGraduateFellowship(John) ::: John qualifies for a graduate fellowship",
        "NeedsRecommendation(x, y) ::: X needs a recommendation from y",
        "MustCompleteInternship(John) ::: John must complete an internship",
        "John(x) ::: X is John",
        "GradePointAverage(x) ::: X's grade point average is y",
        "HonorsEligible(x) ::: X is eligible for honors"
    ],
    "new-fol": [
        "∀x (Student(x) ∧ EnrolledInAndCompletedRequiredCourses(x) → MeetsGraduationRequirements(x))",
        "∀x (Student(x) ∧ MeetsGraduationRequirements(x) ∧ MaintainsHighGPAAbove35(x) → GraduatesWithHonors(x))",
        "∀x (Student(x) ∧ GraduatesWithHonors(x) ∧ CompletesThesis(x) → ReceivesAcademicDistinction(x))",
        "∀x (Student(x) ∧ ReceivesAcademicDistinction(x) → MeetsFellowshipProgramRequirements(x))",
        "∀x (Student(x) ∧ EnrolledInAndCompletedCourses(x, y) ∧ HasEnrolledInSpecifiedCourses(y) → EnrolledInAndCompletedAllCourses(x))",
        "MaintainsHighGPA(John, 3.8)",
        "CompletedThesis(John)"
    ],
    "maps": [
        {
            "RequiredCourses(y)": "HasEnrolledInSpecifiedCourses(y)",
            "CompletedAllRequiredCourses(x)": "EnrolledInAndCompletedAllCourses(x)",
            "CompletesRequiredCourses(x)": "EnrolledInAndCompletedRequiredCourses(x)",
            "CompletedCourses(x, y)": "EnrolledInAndCompletedCourses(x, y)"
        },
        {
            "EligibleForGraduation(x)": "MeetsGraduationRequirements(x)",
            "QualifiesForGraduateFellowshipProgram(x)": "MeetsFellowshipProgramRequirements(x)"
        },
        {
            "HasCompletedThesis(John)": "CompletedThesis(John)"
        },
        {
            "MaintainsGPA(John, 3.8)": "MaintainsHighGPA(John, 3.8)",
            "MaintainsGPAAbove35(x)": "MaintainsHighGPAAbove35(x)"
        }
    ],
    "q_ids": null,
    "logic_program_premise": [
        "RequiredCourses(y) ::: HasEnrolledInSpecifiedCourses(y)",
        "EligibleForGraduation(x) ::: MeetsGraduationRequirements(x)",
        "HasCompletedThesis(John) ::: CompletedThesis(John)",
        "CompletedAllRequiredCourses(x) ::: EnrolledInAndCompletedAllCourses(x)",
        "QualifiesForGraduateFellowshipProgram(x) ::: MeetsFellowshipProgramRequirements(x)",
        "MaintainsGPA(John, 3.8) ::: MaintainsHighGPA(John, 3.8)",
        "Student(x) ::: EnrolledInCourses(x)",
        "CompletesThesis(x) ::: CompletesThesisProject(x)",
        "ReceivesAcademicDistinction(x) ::: ReceivesDistinction(x)",
        "CompletesRequiredCourses(x) ::: EnrolledInAndCompletedRequiredCourses(x)",
        "CompletedCourses(x, y) ::: EnrolledInAndCompletedCourses(x, y)",
        "GraduatesWithHonors(x) ::: GraduatesWithDistinction(x)",
        "MaintainsGPAAbove35(x) ::: MaintainsHighGPAAbove35(x)"
    ],
    "logic_program_question": [
        "Fellowship(y) ::: Y is a fellowship",
        "GraduateFellowshipProgram(program) ::: Program is a graduate fellowship program",
        "BelongsToJohn(x) ::: X belongs to John",
        "QualifiesForGraduateFellowship(John) ::: John qualifies for a graduate fellowship",
        "NeedsRecommendation(x, y) ::: X needs a recommendation from y",
        "MustCompleteInternship(John) ::: John must complete an internship",
        "John(x) ::: X is John",
        "GradePointAverage(x) ::: X's grade point average is y",
        "HonorsEligible(x) ::: X is eligible for honors"
    ],
    "new-question-FOL": [
        "∀x (Person(x) → ∃y (Organization(y) ∧ Hires(x, y)))\n QualifiesForGraduateFellowship(John) ∧ GraduateFellowshipProgram(program)\n ∀x ∀y (John(x) ∧ Fellowship(y) → NeedsRecommendation(x, y))\n MustCompleteInternship(John)\n ∀x (GradePointAverage(x) ∧ BelongsToJohn(x) → ¬HonorsEligible(x)):",
        "∀z (AcademicDistinction(z) → Receives(x, z))"
    ],
    "clusters": [
        [
            "RequiredCourses(y) ::: HasEnrolledInSpecifiedCourses(y)",
            "CompletedAllRequiredCourses(x) ::: EnrolledInAndCompletedAllCourses(x)",
            "CompletesRequiredCourses(x) ::: EnrolledInAndCompletedRequiredCourses(x)",
            "CompletedCourses(x, y) ::: EnrolledInAndCompletedCourses(x, y)",
            "NeedsRecommendation(x, y) ::: X needs a recommendation from y"
        ],
        [
            "EligibleForGraduation(x) ::: MeetsGraduationRequirements(x)",
            "QualifiesForGraduateFellowshipProgram(x) ::: MeetsFellowshipProgramRequirements(x)",
            "Student(x) ::: EnrolledInCourses(x)"
        ],
        [
            "HasCompletedThesis(John) ::: CompletedThesis(John)",
            "MustCompleteInternship(John) ::: John must complete an internship",
            "John(x) ::: X is John"
        ],
        [
            "MaintainsGPA(John, 3.8) ::: MaintainsHighGPA(John, 3.8)",
            "MaintainsGPAAbove35(x) ::: MaintainsHighGPAAbove35(x)"
        ],
        [
            "CompletesThesis(x) ::: CompletesThesisProject(x)"
        ],
        [
            "ReceivesAcademicDistinction(x) ::: ReceivesDistinction(x)"
        ],
        [
            "GraduatesWithHonors(x) ::: GraduatesWithDistinction(x)"
        ],
        [
            "Fellowship(y) ::: Y is a fellowship"
        ],
        [
            "GraduateFellowshipProgram(program) ::: Program is a graduate fellowship program"
        ],
        [
            "BelongsToJohn(x) ::: X belongs to John"
        ],
        [
            "QualifiesForGraduateFellowship(John) ::: John qualifies for a graduate fellowship"
        ],
        [
            "GradePointAverage(x) ::: X's grade point average is y"
        ],
        [
            "HonorsEligible(x) ::: X is eligible for honors"
        ]
    ],
    "solver": [
        {
            "final_ans": "A",
            "idx_final_ans": [],
            "dic_idx_wrong_options": {},
            "proof_final_ans": [],
            "dic_proof_wrong_options": {}
        },
        {
            "final_ans": "Uncertain",
            "idx_final_ans": [],
            "dic_idx_wrong_options": {},
            "proof_final_ans": "============================== prooftrans ============================\nProver9 (64) version 2009-11A, November 2009.\nProcess 2323987 was started by npl on uit-dgx01,\nFri May  9 02:55:24 2025\nThe command was \"/data/npl/ICEK/News/Qwen_evaluate/LADR-2009-11A/bin/prover9\".\n============================== end of head ===========================\n\n============================== end of input ==========================",
            "dic_proof_wrong_options": {}
        }
    ]
}